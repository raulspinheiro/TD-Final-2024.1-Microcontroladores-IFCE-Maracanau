#include <TFT_eSPI.h>  // Biblioteca para trabalhar com o display TFT
#include <SPI.h>
#include <WiFi.h>
#include <esp_now.h>
#include "FS.h"
#include "SPIFFS.h"

// Configurações do display
TFT_eSPI tft = TFT_eSPI();
#define TFT_GREY 0x5AEB

String cardRecebido;
bool dadoRecebido = false;

// Variáveis para armazenar os dados do arquivo
String nomeUsuario = "";
String tipoUsuario = "";
String cursoFuncao = "";

// Endereço MAC da ESP32 remetente
uint8_t broadcastAddress[] = {0x1C, 0x69, 0x20, 0x31, 0x14, 0x60};

// Estrutura para receber dados via ESPNOW
typedef struct struct_message {
    char a[32];
} struct_message;

struct_message myData;

// Função de callback que lida com o recebimento de dados via ESPNOW
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&myData, incomingData, sizeof(myData));
  cardRecebido = String(myData.a);
  dadoRecebido = true;
  Serial.println("Cartão recebido via ESPNOW: " + cardRecebido);
}

void setup() {
  Serial.begin(115200);

  // Inicializa SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("Falha ao montar o sistema de arquivos SPIFFS.");
    return;
  }

  // Inicializa o display
  tft.init();
  tft.setRotation(0);
  tft.fillScreen(TFT_GREY);

  // Configura WiFi no modo station
  WiFi.mode(WIFI_STA);
  
  // Inicializa ESPNOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Erro ao inicializar ESPNOW.");
    return;
  }

  // Registra o callback para receber dados
  esp_now_register_recv_cb(OnDataRecv);
}

// Função para buscar os dados do cartão no arquivo e preencher as variáveis
bool buscarDadosUsuario(String cardID) {
  File file = SPIFFS.open("/cards_usuarios.txt", "r");
  if (!file) {
    Serial.println("Erro ao abrir o arquivo de cartões.");
    return false;
  }
  
  while (file.available()) {
    String linha = file.readStringUntil('\n');
    linha.trim();  // Remove espaços ou quebras de linha extras
    
    if (linha.startsWith(cardID)) {
      // Formato esperado no arquivo: CardID,Nome Sobrenome,Tipo,Curso/Funcao
      String restante = linha.substring(cardID.length() + 1);  // Remove o CardID
      int pos1 = restante.indexOf(',');
      int pos2 = restante.lastIndexOf(',');
      
      nomeUsuario = restante.substring(0, pos1);
      tipoUsuario = restante.substring(pos1 + 1, pos2);
      cursoFuncao = restante.substring(pos2 + 1);
      
      file.close();
      return true;
    }
  }
  
  file.close();
  return false;
}

// Função para exibir os dados no display
void exibirDadosUsuario() {
  // Limpa a tela
  tft.fillScreen(TFT_GREY);
  
  // Exibe o nome e sobrenome
  tft.setCursor(10, 10);
  tft.setTextColor(TFT_WHITE, TFT_GREY);
  tft.setTextSize(2);
  tft.println("Nome e Sobrenome:");
  tft.setTextSize(2);
  tft.setTextColor(TFT_GREEN, TFT_GREY);
  tft.setCursor(10, 40);
  tft.println(nomeUsuario);
  
  // Exibe o tipo de usuário (estudante ou servidor)
  tft.setCursor(10, 80);
  tft.setTextColor(TFT_WHITE, TFT_GREY);
  tft.setTextSize(2);
  tft.println("Tipo de usuario:");
  tft.setTextSize(2);
  tft.setTextColor(TFT_GREEN, TFT_GREY);
  tft.setCursor(10, 110);
  tft.println(tipoUsuario);
  
  // Exibe o curso ou função administrativa
  tft.setCursor(10, 150);
  tft.setTextColor(TFT_WHITE, TFT_GREY);
  tft.setTextSize(2);
  tft.println("Curso ou Funcao:");
  tft.setTextSize(2);
  tft.setTextColor(TFT_GREEN, TFT_GREY);
  tft.setCursor(10, 180);
  tft.println(cursoFuncao);
}

void loop() {
  if (dadoRecebido) {
    dadoRecebido = false;  // Reseta a flag
    bool encontrado = buscarDadosUsuario(cardRecebido);
    
    if (encontrado) {
      exibirDadosUsuario();
    } else {
      Serial.println("Cartão não encontrado.");
      tft.fillScreen(TFT_RED);
      tft.setCursor(10, 100);
      tft.setTextColor(TFT_WHITE, TFT_RED);
      tft.setTextSize(2);
      tft.println("Cartão não encontrado!");
    }
  }
}
